name: Push to GitLab QA & open MR

on:
  push:
    branches: [ main ]      # use main só para o teste; ajuste se quiser
  workflow_dispatch: {}     # permite rodar manualmente

jobs:
  push-and-mr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute remote branch (dev/<actor>/frontend)
        id: v
        run: |
          ACTOR="$(echo "${GITHUB_ACTOR}" | tr '[:upper:]' '[:lower:]')"
          echo "actor=${ACTOR}" >> "$GITHUB_OUTPUT"
          echo "remote=dev/${ACTOR}/frontend" >> "$GITHUB_OUTPUT"

      - name: Preflight: token can read the project?
        env:
          GL_TOKEN:   ${{ secrets.GITLAB_QA_TOKEN }}
          GL_PROJECT: ${{ secrets.GITLAB_QA_PROJECT_ID }}
        run: |
          set -euo pipefail
          curl -sSf --header "PRIVATE-TOKEN: ${GL_TOKEN}" \
            "https://gitlab.com/api/v4/projects/${GL_PROJECT}" > /dev/null
          echo "Token OK para acessar o projeto ${GL_PROJECT}"

      - name: Push to QA fork (no force)
        env:
          GL_USER: ${{ secrets.GITLAB_QA_USERNAME }}
          GL_TOKEN: ${{ secrets.GITLAB_QA_TOKEN }}
          GL_REPO: ${{ secrets.GITLAB_QA_REPO }}
        run: |
          set -euo pipefail
          # monta https://<user>:<token>@gitlab.com/namespace/projeto.git
          AUTH_URL="${GL_REPO/https:\/\//https:\/\/${GL_USER}:${GL_TOKEN}@}"
          git remote add qa "$AUTH_URL" || git remote set-url qa "$AUTH_URL"
          git push qa main:refs/heads/${{ steps.v.outputs.remote }}

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Ensure MR (dev/<actor>/frontend -> frontend)
        env:
          GL_TOKEN:   ${{ secrets.GITLAB_QA_TOKEN }}
          GL_PROJECT: ${{ secrets.GITLAB_QA_PROJECT_ID }}
          SRC:        ${{ steps.v.outputs.remote }}
        run: |
          set -euo pipefail
          API="https://gitlab.com/api/v4"
          TARGET="frontend"

          # verifica se já existe MR aberto
          EXISTING=$(curl -s --header "PRIVATE-TOKEN: ${GL_TOKEN}" \
            "${API}/projects/${GL_PROJECT}/merge_requests?state=opened&source_branch=${SRC}&target_branch=${TARGET}" \
            | jq '.[0]')

          if [ "$EXISTING" != "null" ] && [ -n "$EXISTING" ]; then
            IID=$(echo "$EXISTING" | jq -r '.iid')
            echo "MR já existe (iid=${IID}) para ${SRC} -> ${TARGET}"
            exit 0
          fi

          TITLE="[auto] ${SRC} → ${TARGET}"
          DESC="Criado automaticamente do GitHub (${GITHUB_REPOSITORY}@${GITHUB_SHA})"

          curl -s --request POST --header "PRIVATE-TOKEN: ${GL_TOKEN}" \
            --data-urlencode "title=${TITLE}" \
            --data-urlencode "description=${DESC}" \
            --data "source_branch=${SRC}&target_branch=${TARGET}&remove_source_branch=true" \
            "${API}/projects/${GL_PROJECT}/merge_requests" > /dev/null

          echo "MR criado para ${SRC} -> ${TARGET}"
