name: Push & MR to GitLab QA (safe)

on:
  push:
    branches:
      - 'frontend/**'   # branches de trabalho
  workflow_dispatch: {}

jobs:
  push-and-open-mr:
    runs-on: ubuntu-latest
    env:
      GL_TOKEN:        ${{ secrets.GITLAB_QA_TOKEN }}        # token do fork QA (scopes: read_repository, write_repository)
      GL_QA_REPO:      ${{ secrets.GITLAB_QA_REPO }}         # https://gitlab.com/<qa-namespace>/<fork>.git
      GL_QA_PROJECT:   ${{ secrets.GITLAB_QA_PROJECT_ID }}   # ID numérico do fork QA

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Compute remote branch (unique per dev)
        id: vars
        run: |
          SRC="${GITHUB_REF_NAME}"                                # ex: frontend/paulapelizer-teste
          ACTOR="$(echo "${GITHUB_ACTOR}" | tr '[:upper:]' '[:lower:]')"
          REMOTE="dev/${ACTOR}/${SRC}"                            # ex: dev/paulapelizer/frontend/paulapelizer-teste
          echo "src=${SRC}"       >> $GITHUB_OUTPUT
          echo "remote=${REMOTE}" >> $GITHUB_OUTPUT

      - name: Push to QA fork (no force)
        run: |
          AUTH_URL="${GL_QA_REPO/https:\/\//https:\/\/oauth2:${GL_TOKEN}@}"
          git remote add gitlab-qa "$AUTH_URL"
          git push gitlab-qa HEAD:refs/heads/${{ steps.vars.outputs.remote }}

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Open MR in QA fork (dev/<user>/... -> frontend) if not exists
        run: |
          SRC="${{ steps.vars.outputs.remote }}"
          # procura MR aberto com essa source_branch no fork QA
          MR=$(curl -s --header "PRIVATE-TOKEN: ${GL_TOKEN}" \
            "https://gitlab.com/api/v4/projects/${GL_QA_PROJECT}/merge_requests?state=opened&source_branch=${SRC}" \
            | jq '.[0]')

          if [ "$MR" = "null" ] || [ -z "$MR" ]; then
            TITLE="[auto] ${SRC} → frontend"
            DESC="Criado automaticamente a partir do GitHub (${GITHUB_REPOSITORY}@${GITHUB_SHA})"

            curl -s --request POST --header "PRIVATE-TOKEN: ${GL_TOKEN}" \
              --data-urlencode "title=${TITLE}" \
              --data-urlencode "description=${DESC}" \
              --data "source_branch=${SRC}" \
              --data "target_branch=frontend" \
              "https://gitlab.com/api/v4/projects/${GL_QA_PROJECT}/merge_requests" >/dev/null

            echo "MR criado: ${SRC} -> frontend (fork QA)"
          else
            IID=$(echo "$MR" | jq -r '.iid')
            echo "MR já existe no fork QA (iid=${IID}) para ${SRC} -> frontend"
          fi
